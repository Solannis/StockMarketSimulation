DEVELOPER JOURNAL

24-Jul-2018 - 1:51 p.m. - MBF

Stock class is initial complete. Accompanying JUnit test class (StockTest) is equally complete.
Trader class is mostly complete. Accompanying Junit test class (TraderTest) is equally complete. 

May need to look at whether or not using Float for numerical transactions is a good idea. Apparently there are some rounding/math issues that may become a
problem. This was noted when developing the ChangeWallet tests for the TraderTest class. Starting with a value of 99.99f (FLOAT_POSITIVE) and adding a value
of 0.01f (FLOAT_PENNY) worked correctly and gave me 100.00f. When I then subtracted 99.99f ( -(FLOAT_POSITIVE) ), the result was 0.010002136. I briefly
looked into rounding and whatnot, but this could, over time (perhaps a very short amount of time) become a math problem that could impact the game in the
long term. Not by a whole lot (a penny, plus or minus over time), but it is worth keeping an eye on.

TODO: Need to start defining the attributes/settings used in the different modes, starting with TUTORIAL_BASIC and TUTORIAL_ADVANCED. One of my key thoughts on
the difference between those two is that the _BASIC mode will only last a few trading days long, as it is really designed to get players used to how the
game works. The _ADVANCED mode will have a goal/term setting like the other modes, but will otherwise remain the same kind of game (very limited stocks,
all useful news stories, limited competing traders, etc.). Another difference will be that in the _BASIC mode, all trader attributes will be fixed, but 
in _ADVANCED mode, the traders' attributes will be randomized so it's not always the same replay.

TODO: Defining attributes used in _BASIC for the Stock object is already done, as those values are already coded and documented in the StockData class. A 
similar class will be needed for the Trader class and (potentially?) the Market class.

TODO: Need to go through the Stock and StockTest classes to find my notes left over about dealing with return errors.


25-Jul-2018 - 2:52 p.m. - MBF

- Moved the JUnit test classes to their own package, added import statements for the classes being tested, cleaned the build, and re-ran all the tests to
make sure they still passed.

- Changed the comments in StockData to reflect /* */ syntax instead of // syntax.

- Added a new class: TraderData. This class will serve the same general purpose as the StockData class.

It occurs to me that, for trader names and bios, I may need a much longer list of first names, last names, and bios, and let the simulation select the
appropriate number of first and last names and bios and build the object inventory randomly. For now, since I am only working on the basic tutorial mode,
I am pre-loading and fixing both the stock and trader data for now. I may want to make the trader data random even in the tutorial modes, but the stock
data for the tutorial should stay the way it is -- simplified and limited.


28-Jul-2018 - 12:01 a.m. - MBF

- Made some minor updates to SimConstants and TraderData.

- TODO L20: Already completed TraderData class for at least the tutorial mode. Still need to do this TODO for the Market class, but that will require
more thought later on.

TODO: Later this morning, I will need to add some methods to the trader to randomly self-select its own traderWallet amount and traderFrequency. Trader
wallet will be a random amount based on RNG with TUTORIAL_TRADER_WALLET_ADDITIONAL as the random range parameter and add that to TUTORIAL_TRADER_WALLET_MIN.
Final wallet will be TUTORIAL_TRADER_WALLET_MIN + RND(TUTORIAL_TRADER_WALLET_ADDITIONAL). May need to create a compatible float version for this or wind
up doing some fancy int -> float conversions.


31-Jul-2018 - 8:33 p.m. - MBF

- Changed RNG by adding a method to produce a random float value (between 0.0f and 1.0f inclusive). Will just have to be aware of the limitations (there
was no parameter value version that would allow me to create a float within a range based on a provided MAXVALUE parameter).

- Added the first call to create a single Trader object in the Market class. This is only temporary.

- Added a method to the Trader class to allow for the "initialization" of the traderWallet (beyond the 0.0f initialization). This method now populates
the traderWallet with a starting bankroll of $10,000.00(f) (SimConstants.TUTORIAL_TRADER_WALLET_MIN, the base minimum amount for tutorial traders) plus 
an additional amount (SimConstants.TUTORIAL_TRADER_WALLET_ADDITIONAL), which is a randomly-created value for each trader.

TODO: Need to finish and refine the TODO L48 methods before modifying the Market class to support an array of traders. In the Market class, need to
follow the SelectStocks example and make sure there is a switch statement that allows the code to populate the right kind of traders (TUTORIAL or regular)
based on the Market Mode (TUTORIAL or regular).


01-Aug-2018 - 7:59 p.m. - MBF

 - I have begun the long and arduous journey of converting all float references to BigDecimal. This is not just a simple find/replace operation, as the
 math and comparison operations for BigDecimal are significantly different than simple float. That said, this will ultimately result in a more accurate
 handling of dollars-and-cents values in comparison to the math error described on L8. I am starting with the Stock class, then will most likely need to
 update the StockTest class and the StockData class, and then I can move onto the Trader class. I will also make changes to SimConstants as needed in
 support of changes to the previously-mentioned classes.
 
 TODO: I need to analyze *all* the Stock class numeric (int, BigDecimal) attribute values to see if they can ever be 0.00 or if the lowest value is 0.01.
 
 
 04-Aug-2018 - 1:43 p.m. - MBF
 
 - Completed updating the Stock and StockTest classes for the BigDecimal change. Need to attack the Trader and TraderTest classes next. After that is
 done, I need to spend some time on TODO L78 as described above.
 
 
 13-Aug-2018 - 6:12 p.m. - MBF
 
 - Completed updating Trader and TraderTest classes for the BigDecimal change.
 
 - Interesting epiphany: in the context of the code I've written, a stock really isn't *just a stock* so much as it is a company. After all, a stock
 does not have a "company profit." It may reflect one, and have an associated attribute (as does mine) but it seems as if the two are one and the
 same as far as my code is concerned. Still, I think stock is the right approach for this class (as opposed to company).
 
 - For all of the following attributes, I need to decide what the proper floor is: 0.00 or 0.01, decide what the ceiling is (if there even is one, 
 decide what the norm/typical range should be, then make sure the appropriate getters and setters do the right things based on those decisions.
 	- stockSharesTotal;				// The total number of shares available of this stock.
	- stockSharesOutstanding;		// The number of shares held/owned by investors/traders/not in the company's pool; e.g. stockSharesTotal - stockSharesOutstanding = shares available for purchase.
	- stockDividendPaid;			// The dollar value of any annual dividend paid for a single share of stock for the current fiscal year.
	- stockEarningsPerShare;		// The EPS is calculated by dividing the companyProfit by stockSharesOutstanding.
	- stockMarketCap;				// The Market Cap is calculated by multiplying the SharesTotal by the present share price.
	- stockProfitEarningsRatio;		// The Profit Earnings Ratio is calculated by dividing the stockCurrentPrice by the stockEarningsPerShare.
	- stockDividendYield;			// The Dividend Yield is calculated by dividing the dollar value of dividends paid in a given year per share of stock held by stockCurrentPrice for one share of stock.
	- companyProfit;				// The Company Profit is a given value for purposes of calculating the Earnings Per Share.
	
	int stockSharesTotal
	====================
	Total shares of stock, which includes both outstanding (owned by the player and other AI traders) and available (shares which are available to
	be purchased) shares. stockSharesAvailable (not a tracked attribute) = stockSharesTotal - stockSharesOutstanding.
	- Floor: 1 - There cannot be less than one share, or the compamny would not be tradeable at all.
	- Celing: n.max - Determined from the StockData array provided.
	- Typical: n - Determined from the StockData array provided. Will depend on the type of company and the game mode. In the tutorial modes, the 
	stockSharesTotal will be limited to 80,000 shares or less. The more rare/valuable the resource, the fewer the total shares. Reasoning: Having 80,000
	shares of gold (for example) would allow a player to ratchet up artificially high artificially fast. My thinking is that keeping a limit on the more
	valuable stocks will be good for making the player work for it. This thinking can and should be revisited later. 
	
	int stockSharesOutstanding
	==========================
	Number of shares in investors/individuals hands. These are people who "bought" shares in the company. As described above, total shares minus
	outstanding shares = total shares available.
	- Floor: 0 - There can be zero outstanding shares, which means no one has purchased ANY shares of this stock.
	- Ceiling: stockSharesTotal - The maxium this value can be is the total number of stock shares. This would mean the stock is sold out.
	- Typical: n - Determined by how many shares of a given stock are held (sold) by the player and AI traders.
	
	BigDecimal companyProfit
	========================
	The companyProfit value is a fixed number for the duration of the simulation session. This will ultimately work like the trader wallet: a base
	value with some 15% variance added before main session play begins. The base value will be a fixed value provided in the stockData ckass. This value
	is not likely to change during the length of the session, so floor and ceiling value thoughts are not needed here.
	- Typical: $0.100M ($100,000.00) to $1.0T ($1,000,000,000,000) depending on the stock. 
	
	BigDecimal stockDividendPaid
	============================
	This is the amount of dividend paid out to investors as of the last quarter/half/year. I need to look further into how a company decides whether
	and/or how much dividend should be paid out.
	- Floor: 0.00 - A company can decide not to pay a dividend at all.
	- Ceiling: n^x - A dividend, for the purposes of this simulation, should reflect a percent of company profit or, at the very least, a scrape from
	finance web.
	- Typical: Some distribution of stocks that pay and stocks that don't pay will need to be determined. For the short duration that the simulation
	sessions will cover, it probably won't matter, but if longer simulations are in the works, then this will play a small factor in the finances of
	those longer simulations.
	
	BigDecimal stockEarningsPerShare
	================================
	One of many ways to measure the value of a stock, earnings per share is a derivation of the companyProfit divided by stockSharesOutstanding. How 
	much profit a company has made per share within a given period. EPS is a fairly arbitrary number by itself, because the company can control the 
	number of shares outstanding through splits and buybacks. But comparing a company's most recent EPS to its EPS in previous years and quarters 
	(adjusted for any splits) is one of the most common ways of telling how fast the company's profits are growing (Source: Morningstar).
	- Floor: since companyProfit will typically be at least $100,000 and outstanding shares can be zero
	