DEVELOPER JOURNAL

24-Jul-2018 - 1:51 p.m. - MBF

Stock class is initial complete. Accompanying JUnit test class (StockTest) is equally complete.
Trader class is mostly complete. Accompanying Junit test class (TraderTest) is equally complete. 

May need to look at whether or not using Float for numerical transactions is a good idea. Apparently there are some rounding/math issues that may become a
problem. This was noted when developing the ChangeWallet tests for the TraderTest class. Starting with a value of 99.99f (FLOAT_POSITIVE) and adding a value
of 0.01f (FLOAT_PENNY) worked correctly and gave me 100.00f. When I then subtracted 99.99f ( -(FLOAT_POSITIVE) ), the result was 0.010002136. I briefly
looked into rounding and whatnot, but this could, over time (perhaps a very short amount of time) become a math problem that could impact the game in the
long term. Not by a whole lot (a penny, plus or minus over time), but it is worth keeping an eye on.

TODO: Need to start defining the attributes/settings used in the different modes, starting with TUTORIAL_BASIC and TUTORIAL_ADVANCED. One of my key thoughts on
the difference between those two is that the _BASIC mode will only last a few trading days long, as it is really designed to get players used to how the
game works. The _ADVANCED mode will have a goal/term setting like the other modes, but will otherwise remain the same kind of game (very limited stocks,
all useful news stories, limited competing traders, etc.). Another difference will be that in the _BASIC mode, all trader attributes will be fixed, but 
in _ADVANCED mode, the traders' attributes will be randomized so it's not always the same replay.

TODO: Defining attributes used in _BASIC for the Stock object is already done, as those values are already coded and documented in the StockData class. A 
similar class will be needed for the Trader class and (potentially?) the Market class.

TODO: Need to go through the Stock and StockTest classes to find my notes left over about dealing with return errors.


25-Jul-2018 - 2:52 p.m. - MBF

- Moved the JUnit test classes to their own package, added import statements for the classes being tested, cleaned the build, and re-ran all the tests to
make sure they still passed.

- Changed the comments in StockData to reflect /* */ syntax instead of // syntax.

- Added a new class: TraderData. This class will serve the same general purpose as the StockData class.

It occurs to me that, for trader names and bios, I may need a much longer list of first names, last names, and bios, and let the simulation select the
appropriate number of first and last names and bios and build the object inventory randomly. For now, since I am only working on the basic tutorial mode,
I am pre-loading and fixing both the stock and trader data for now. I may want to make the trader data random even in the tutorial modes, but the stock
data for the tutorial should stay the way it is -- simplified and limited.


28-Jul-2018 - 12:01 a.m. - MBF

- Made some minor updates to SimConstants and TraderData.

- TODO L20: Already completed TraderData class for at least the tutorial mode. Still need to do this TODO for the Market class, but that will require
more thought later on.

TODO: Later this morning, I will need to add some methods to the trader to randomly self-select its own traderWallet amount and traderFrequency. Trader
wallet will be a random amount based on RNG with TUTORIAL_TRADER_WALLET_ADDITIONAL as the random range parameter and add that to TUTORIAL_TRADER_WALLET_MIN.
Final wallet will be TUTORIAL_TRADER_WALLET_MIN + RND(TUTORIAL_TRADER_WALLET_ADDITIONAL). May need to create a compatible float version for this or wind
up doing some fancy int -> float conversions.


31-Jul-2018 - 8:33 p.m. - MBF

- Changed RNG by adding a method to produce a random float value (between 0.0f and 1.0f inclusive). Will just have to be aware of the limitations (there
was no parameter value version that would allow me to create a float within a range based on a provided MAXVALUE parameter).

- Added the first call to create a single Trader object in the Market class. This is only temporary.

- Added a method to the Trader class to allow for the "initialization" of the traderWallet (beyond the 0.0f initialization). This method now populates
the traderWallet with a starting bankroll of $10,000.00(f) (SimConstants.TUTORIAL_TRADER_WALLET_MIN, the base minimum amount for tutorial traders) plus 
an additional amount (SimConstants.TUTORIAL_TRADER_WALLET_ADDITIONAL), which is a randomly-created value for each trader.

TODO: Need to finish and refine the TODO L48 methods before modifying the Market class to support an array of traders. In the Market class, need to
follow the SelectStocks example and make sure there is a switch statement that allows the code to populate the right kind of traders (TUTORIAL or regular)
based on the Market Mode (TUTORIAL or regular).


01-Aug-2018 - 7:59 p.m. - MBF

 - I have begun the long and arduous journey of converting all float references to BigDecimal. This is not just a simple find/replace operation, as the
 math and comparison operations for BigDecimal are significantly different than simple float. That said, this will ultimately result in a more accurate
 handling of dollars-and-cents values in comparison to the math error described on L8. I am starting with the Stock class, then will most likely need to
 update the StockTest class and the StockData class, and then I can move onto the Trader class. I will also make changes to SimConstants as needed in
 support of changes to the previously-mentioned classes.
 
 TODO: I need to analyze *all* the Stock class numeric (int, BigDecimal) attribute values to see if they can ever be 0.00 or if the lowest value is 0.01.
 
 
 04-Aug-2018 - 1:43 p.m. - MBF
 
 - Completed updating the Stock and StockTest classes for the BigDecimal change. Need to attack the Trader and TraderTest classes next. After that is
 done, I need to spend some time on TODO L78 as described above.
 
 